<?php

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\noticeboard\Entity\Notice;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\wik_messaging\Entity\WikMessage;
use Drupal\wik_events\Entity\Event;
use Drupal\comment\Entity\Comment;

function cocomore_profile_install() {
  // Now that all modules are installed, make sure the entity storage and other
  // handlers are up to date with the current entity and field definitions. For
  // example, Path module adds a base field to nodes and taxonomy terms after
  // those modules are already installed.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();

  // Set front page to activity stream item.
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/wik_home/home')->save();
  // ToDo: See WIK-53.
  \Drupal::configFactory()->getEditable('system.performance')->set('js.preprocess', FALSE)->save();

  /** @var \Drupal\Core\Path\AliasStorageInterface $alias_storage */
  $alias_storage = \Drupal::service('path.alias_storage');

  // Allow visitor account creation with administrative approval.
  $user_settings = \Drupal::configFactory()->getEditable('user.settings');
  $user_settings->set('register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
  // Set this as the administrator role.
  $user_settings->set('admin_role', 'system_administrator');
  $user_settings->save();

  // Preload roles as helper for the user creation. Indexed by label.
  $roles = array();
  $role_entities = entity_load_multiple('user_role');
  foreach ($role_entities as $role) {
    $roles[$role->label()] = $role;
  }

  // Create files first because we attach them to users and products as well.
  $images = array();
  $files = glob(__DIR__ . '/content/images/*.png');
  foreach ($files as $file_name) {
    file_unmanaged_copy($file_name, 'public://' . basename($file_name));
    $image = entity_create('file', array('uri' => 'public://' . basename($file_name)));
    $image->save();
    $images[basename($file_name)] = $image;
  }

  $address_default =  ['postal_code' => '12305', 'locality' => 'Berlin', 'country' => 'DE'];

  // Create users based on the CSV.
  $users = array();
  $handle = fopen(__DIR__ . '/content/demo-users.csv', 'r');
  $index = 0;
  while ($line = fgetcsv($handle)) {
    $index++;
    if ($index < 3) {
      continue;
    }
    // Roles are provided by label of role, not id of role. Convert.
    $user_roles = array('authenticated');
    if (!empty($line[2])) {
      foreach (explode(',', $line[2]) as $role_label) {
        $user_roles[] = $roles[trim($role_label)]->id();
      }
    }
    list($lon, $lat) = explode(' ', $line[5]);
    $user = User::create(
      array(
        'name' => $line[0],
        // Password same as name, this is a demo profile after all.
        'pass' => $line[0],
        'mail' => $line[1],
        'init' => $line[1],
        'status' => 1,
        'roles' => $user_roles,
        'field_address' => ['thoroughfare' => $line[4]] + $address_default,
        'field_geo' => _cocomore_profile_get_point_from_lonlat($lon, $lat),
        'field_name' => $line[6],
        'field_surname' => $line[7],
        'field_birthdate' => $line[8],
        'field_telephone' => $line[9],
        'field_mobile_phone' => $line[10],
        'field_gender' => $line[11],
        'field_interests' => ['Musik', 'Zeitgenössische Literatur', 'Theater und Kino', 'Elektrotechnik', 'Fußball', 'Spazierengehen'],
        'field_push_notices_status' => 1,
      )
    );
    if (!empty($images[$line[3]])) {
      $user->user_picture = array(array('target_id' => $images[$line[3]]->id()));
    }
    $user->save();
    $users[$line[0]] = $user;
  }
  fclose($handle);

  // Save last point in the admin, we need something there or pages will look empty.
  $admin = User::load(1);
  $admin->field_geo = _cocomore_profile_get_point_from_lonlat($lon, $lat);
  $admin->save();

  // Create some messages between users
  $handle = fopen(__DIR__ . '/content/demo-messages.csv', 'r');
  $index = 0;
  while ($line = fgetcsv($handle)) {
    $index++;
    if ($index < 3) {
      continue;
    }
    $message = WikMessage::create(
      array(
        'user_id' => $users[$line[1]],
        'field_target_user' =>array(array('target_id' => $users[$line[2]]->id())),
        'field_body' => ['value' => $line[4], 'format' => 'basic_html'],
        'name' => $line[3],
      )
    );
    $message->save();
    $messages[$line[0]] = $message;
  }
  fclose($handle);

  // Create some replies to the previous messages based on the CSV:
  $handle = fopen(__DIR__ . '/content/demo-messages-replies.csv', 'r');
  $index = 0;
  while ($line = fgetcsv($handle)) {
    $index++;
    if ($index < 3) {
      continue;
    }

    $comment = Comment::create(
      array(
        'entity_id' => $messages[$line[0]]->id(),
        'entity_type' => $line[1],
        'comment_type' => $line[2],
        'field_name' => $line[3],
        'uid' => $users[$line[4]]->id(),
        'subject' => $line[5],
        'comment_body' => ['value' => $line[6], 'format' => 'basic_html'],
      )
    );

    $comment->save();
  }
  fclose($handle);

  // Create notices based on the CSV.
  $notices = array();
  $handle = fopen(__DIR__ . '/content/demo-notices.csv', 'r');
  $index = 0;
  while ($line = fgetcsv($handle)) {
    $index++;
    if ($index < 3) {
      continue;
    }
    list($lon, $lat) = explode(' ', $line[6]);
    $notice = Notice::create(
      array(
        'type' => $line[3],
        'title' => $line[1],
        'body' => ['value' => $line[7], 'format' => 'basic_html'],
        'uid' => $users[$line[2]],
        'field_geo' => _cocomore_profile_get_point_from_lonlat($lon, $lat),
        'field_address' => ['thoroughfare' => $line[5]] + $address_default,
        'field_has_address' => $line[4] == 'Yes' ? 1 : 0,
      )
    );

    if ($line[3] == 'ads') {
      // For ads we need to add more fields:
      $notice->field_provider = $line[8];
      $notice->field_contact_info = ['value' => $line[9], 'format' => 'basic_html'];
      $notice->field_image = array(array('target_id' => $images['worker.png']->id()));
      $notice->field_logo = array(array('target_id' => $images['grubel.png']->id()));
      // @TODO : Fixme when users can create ads.
      $notice->set('uid', 1);
    }
    $notice->save();
    $notices[$line[0]] = $notice;
  }
  fclose($handle);

  // Create events based on the CSV.
  $events = array();
  $handle = fopen(__DIR__ . '/content/demo-events.csv', 'r');
  $index = 0;
  while ($line = fgetcsv($handle)) {
    $index++;
    if ($index < 3) {
      continue;
    }
    list($lon, $lat) = explode(' ', $line[5]);
    $event_address = [
      'organisation_name' => $line[8],
      'thoroughfare' => $line[9],
      'postal_code' => $line[10],
      'locality' => $line[11],
      'country' => $line[12],
    ];
    $event = Event::create(
      array(
        'title' => $line[1],
        'uid' => $users[$line[2]],
        'field_date' => \DateTime::createFromFormat('Y-m-d H:i:s O', $line[3])->format('Y-m-d\TH:i:s'),
        'field_end' => \DateTime::createFromFormat('Y-m-d H:i:s O', $line[4])->format('Y-m-d\TH:i:s'),
        'field_geo' => _cocomore_profile_get_point_from_lonlat($lon, $lat),
        'field_address' => $event_address,
        'field_price' => $line[6],
        'body' => $line[13],
      )
    );
    $event->field_image = array(array('target_id' => $images['berlin.png']->id()));

    // Add the website if any:
    if (!empty($line[7])) {
      $event->set('field_website', $line['7']);
    }

    $event->save();
    $events[$line[0]] = $event;
  }
  fclose($handle);

  // Create some Help pages:
  $handle = fopen(__DIR__ . '/content/demo-help.csv', 'r');
  $index = 0;
  $help_links = [];
  while ($line = fgetcsv($handle)) {
    $index++;
    if ($index < 3) {
      continue;
    }
    // Based on : https://www.drupal.org/node/2271867
    $settings = [
      'revision' => 0,
      'type' => 'help_page',
      'language' => 'de',
    ];
    $help_page = Node::create($settings);

    $help_page->uid = 1;
    $help_page->setTitle($line[0]);
    $help_page->body = ['value' => $line[1], 'format' => 'full_html'];
    $help_page->setPublished(TRUE);
    $help_page->setPromoted(FALSE);
    $help_page->setSticky(FALSE);
    $help_page->log = '';
    $help_page->save();
    // Create the alias:
    $alias_storage->save('/node/' . $help_page->id(), $line[2]);

    // Get the first help notice form the CSV as the link to /help section at the main menu.
    if (!isset($first_help_page)) {
      $first_help_page = $help_page;
    }

    // Add the link definition to the Help menu.
    $help_links[] = [
      'title' => $line[3],
      'link' => ['uri' => 'entity:node/' . $help_page->id()],
      'description' => '',
    ];

  }
  fclose($handle);

  // Create Registration authorities based on the CSV.
  $handle = fopen(__DIR__ . '/content/demo-registration-authorities.csv', 'r');
  $address_default = ['postal_code' => '64283', 'locality' => 'Darmstadt', 'country' => 'DE'];
  $index = 0;
  while ($line = fgetcsv($handle)) {
    $index++;
    if ($index < 3) {
      continue;
    }
    list($lon, $lat) = explode(' ', $line[2]);
    // Based on : https://www.drupal.org/node/2271867
    $settings = [
      'revision' => 0,
      'type' => 'registration_authority',
      'language' => 'de',
      'field_geo' => _cocomore_profile_get_point_from_lonlat($lon, $lat),
      'field_address' => ['thoroughfare' => $line[1]] + $address_default,
      'field_telephone' => $line[3],
      'field_time_table' => ['value' => $line[4], 'format' => 'basic_html'],
    ];
    $registration_authority = Node::create($settings);
    $registration_authority->field_logo = array(array('target_id' => $images['logo-FedMinLabSocAff.png']->id()));
    $registration_authority->uid = 1;
    $registration_authority->setTitle($line[0]);
    $registration_authority->setPublished(TRUE);
    $registration_authority->setPromoted(FALSE);
    $registration_authority->setSticky(FALSE);
    $registration_authority->log = '';
    $registration_authority->save();
  }
  fclose($handle);

  // Fix rest settings for notices. See https://www.drupal.org/node/2397271.
  $rest_settings = \Drupal::configFactory()->getEditable('rest.settings');
  $get_config = $rest_settings->get('resources.entity:user');
  $rest_settings->set('resources.entity:notice', $get_config);
  $rest_settings->save();

  // Fix permissions so REST works.
  $permissions = ['restful get entity:user', 'restful get entity:notice',
    // TODO: Anonymous has access to user profiles and notices for REST purposes,
    // not sure if a good idea.
   'access notices', 'access user profiles'];
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $permissions);

  // Create main menu.
  $main_menu_links = array(
    array(
      'title' => 'Startseite',
      'link' => ['uri' => 'route:<front>'],
      'description' => '',
    ),
    array(
      'title' => 'Nachrichten',
      'link' => ['uri' => 'route:view.messages.page_1'],
      'description' => '',
    ),
    array(
      'title' => 'Einstellungen',
      'link' => ['uri' => 'route:wik_usersettings.settings'],
      'description' => '',
    ),
    array(
      'title' => 'Anleitung',
      'link' => ['uri' => 'entity:node/' . $first_help_page->id()],
      'description' => '',
    ),
    array(
      'title' => 'Sprachsteuerung',
      'link' => ['uri' => 'internal:#voice'],
      'description' => '',
    ),
  );
  $noticeboard_footer_links = array(
    array(
      'title' => 'Durchsuchen',
      'link' => ['uri' => 'route:wik_search.search.form'],
      'description' => '',
    ),
    array(
      'title' => 'Meine Anzeigen',
      'link' => ['uri' => 'internal:#my_ads'],
      'description' => '',
    ),
    array(
      'title' => 'Neue Anzeige',
      'link' => ['uri' => 'route:notice.add_page_multi'],
      'description' => '',
    ),
    array(
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ),
  );
  $notice_footer_links = array(
    array(
      'title' => 'Kontaktdaten',
      'link' => ['uri' => 'internal:#contact'],
      'description' => '',
    ),
    array(
      'title' => 'Nachricht schreiben',
      'link' => ['uri' => 'route:wik_message.multistep_add_form'],
      'description' => '',
    ),
    array(
      'title' => 'Empfehlen',
      'link' => ['uri' => 'internal:#recommend'],
      'description' => '',
    ),
    array(
      'title' => 'Karte anzeigen',
      'link' => ['uri' => 'internal:#map'],
      'description' => '',
    ),
    array(
      'title' => 'Bearbeiten',
      'link' => ['uri' => 'internal:#edit'],
      'description' => '',
    ),
    array(
      'title' => 'Löschen',
      'link' => ['uri' => 'internal:#delete'],
      'description' => '',
    ),
    array(
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ),
  );
  $home_links = array(
    array(
      'title' => 'Schwarzes Brett',
      'link' => ['uri' => 'route:view.requests.page_1'],
      'description' => '',
    ),
    array(
      'title' => 'Veranstaltungen',
      'link' => ['uri' => 'route:view.current_events.page_1'],
      'description' => '',
    ),
    array(
      'title' => 'Kontakte',
      'link' => ['uri' => 'route:view.contacts.page_1'],
      'description' => '',
    ),
  );
  $contacts_footer_links = array(
    array(
      'title' => 'Durchsuchen',
      'link' => ['uri' => 'internal:#search'],
      'description' => '',
    ),
    array(
      'title' => 'Neuer Kontakt',
      'link' => ['uri' => 'internal:#newcontact'],
      'description' => '',
    ),
    array(
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ),
  );
  $profile_footer_links = array(
    array(
      'title' => 'Nachricht schreiben',
      'link' => ['uri' => 'route:wik_message.multistep_add_form'],
      'description' => '',
    ),
    array(
      'title' => 'Video Chat',
      'link' => ['uri' => 'internal:#video'],
      'description' => '',
    ),
    array(
      'title' => 'Neuer Kontakt',
      'link' => ['uri' => 'internal:#newcontact'],
      'description' => '',
    ),
    array(
      'title' => 'Empfehlen',
      'link' => ['uri' => 'internal:#share'],
      'description' => '',
    ),
    array(
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ),
  );

  // Define the links for the menu 'messages_list_footer'
  $messages_list_links = [
    array(
      'title' => 'Nachricht schreiben',
      'link' => ['uri' => 'route:wik_message.multistep_add_form'],
      'description' => '',
    ),
    array(
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ),
  ];

  // Define the links for the menu 'message_footer'
  $message_detail_links = [
    array(
      'title' => 'Antworten',
      'link' => ['uri' => 'route:wik_message.multistep_add_form'],
      'description' => '',
    ),
    array(
      'title' => 'Allen antworten',
      'link' => ['uri' => 'route:wik_message.multistep_add_form'],
      'description' => '',
    ),
    array(
      'title' => 'Weiterleiten',
      'link' => ['uri' => 'route:wik_message.multistep_add_form'],
      'description' => '',
    ),
    array(
      'title' => 'Löschen',
      'link' => ['uri' => 'route:wik_message.multistep_add_form'],
      'description' => '',
    ),
    array(
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ),
  ];

  // Define the links for the menu 'messages_list_footer'
  $help_footer_links = [
    array(
      'title' => 'Durchsuchen',
      'link' => ['uri' => 'internal:#search'],
      'description' => '',
    ),
    array(
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ),
  ];

  // Define the links for the menu : events-footer.
  $events_footer_links = [
    [
      'title' => 'Webseite ansehen',
      'link' => ['uri' => 'internal:#website'],
      'description' => '',
    ],
    [
      'title' => 'Vorlesen',
      'link' => ['uri' => 'internal:#read'],
      'description' => '',
    ],
  ];

  _cocomore_profile_create_menu_links($main_menu_links, 'main');
  _cocomore_profile_create_menu_links($noticeboard_footer_links, 'noticeboard_footer');
  _cocomore_profile_create_menu_links($notice_footer_links, 'notice_footer');
  _cocomore_profile_create_menu_links($home_links, 'frontpage_left');
  _cocomore_profile_create_menu_links($contacts_footer_links, 'contacts_footer');
  _cocomore_profile_create_menu_links($profile_footer_links, 'profile_footer');
  _cocomore_profile_create_menu_links($message_detail_links, 'message-footer');
  _cocomore_profile_create_menu_links($messages_list_links, 'messages-list-footer');
  _cocomore_profile_create_menu_links($help_links, 'help-menu');
  _cocomore_profile_create_menu_links($help_footer_links, 'help-footer');
  _cocomore_profile_create_menu_links($events_footer_links, 'events-footer');

  // Create aliases.
  $alias_storage->save('/noticeboard', '/noticeboard/requests');
  $alias_storage->save('/contacts', '/contacts/friends');
  $alias_storage->save('/messages', '/messages/inbox');
  $alias_storage->save('/search/wik', '/search/wik/requests');

  // Flag some friends.
  $friendships = [[2,4], [2,5], [3, 5], [4, 2], [6, 2]];
  foreach ($friendships as $friendship) {
    $flagging = \Drupal\flag\Entity\Flagging::create(array(
        'flag_id' => 'friend',
        'entity_type' => 'user',
        'uid' => $friendship[0],
        'entity_id' => $friendship[1],
      )
    );
    $flagging->save();
  }
}

/**
 * @param $main_menu_links
 *
 */
function _cocomore_profile_create_menu_links($menu_links, $menu_name) {
  $weight = 0;
  foreach ($menu_links as $menu_link) {
    $menu_link['menu_name'] = $menu_name;
    $menu_link['weight'] = $weight;
    $menu_link['attributes'] = [];
    $menu_link['parent'] = '';
    $menu_link['link'] += ['title' => '', 'options' => []];

    $weight += 10;

    MenuLinkContent::create($menu_link)->save();
  }
}

function _cocomore_profile_get_point_from_lonlat($lon, $lat) {
  $geom = array(
    'value' => 'POINT (' . $lon . ' ' . $lat . ')',
    'geo_type' => 'Point',
    'lat' => $lat,
    'lon' => $lon,
    'left' => $lon,
    'top' => $lat,
    'right' => $lon,
    'bottom' => $lat,
  );
  geophp_load();
  $geometry = geoPHP::load($geom['value']);
  $geom['geohash'] = $geometry->out('geohash');
  return $geom;
}
